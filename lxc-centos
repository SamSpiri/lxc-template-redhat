#!/bin/sh
#
# LXC Red Hat/CentOS installation script.
#

set -e

#-----------------------------------------------------------------------------
# some setup

#SUITE=centos-5
SUITE=${0##*/lxc-}

# Directory with centos.halt and centos.rc.sysinit, which are replacements for
# RH/CentOS 5 and 6 initscripts.
INITSCRIPTS=/usr/local/lib/lxc/initscripts

# This is the default value used by yumbootstrap
#YUMBOOTSTRAP_SUITE_DIR=/etc/yumbootstrap/suites

# XXX: unused at the moment, except for $INSTALLED_OS_CACHE_DIR
ARCH=$(uname -m)
case $ARCH in i[3-6]86) ARCH=i686 ;; esac

INSTALLED_OS_CACHE_DIR=/var/cache/lxc/$SUITE/rootfs-$ARCH
# Network interface name from the guest's perspective
GUEST_IFACE=eth0

#-----------------------------------------------------------------------------
# helper functions

yumbootstrap() {
  /usr/local/sbin/yumbootstrap \
    --verbose --noninteractive \
    ${YUMBOOTSTRAP_SUITE_DIR:+--suite-dir=$YUMBOOTSTRAP_SUITE_DIR} \
    "$@"
}

replace_script() {
  script=$1
  replacement=$2

  cp $script $script.orig
  cat $replacement > $script
}

bdev() {
  root_dir=$1
  mode=$2
  owner=$3
  major=$4
  minor=$5
  name=$6

  mknod --mode=$mode $root_dir$name b $major $minor
  chroot $root_dir chown $owner $name
}

cdev() {
  root_dir=$1
  mode=$2
  owner=$3
  major=$4
  minor=$5
  name=$6

  mknod --mode=$mode $root_dir$name c $major $minor
  chroot $root_dir chown $owner $name
}

#-----------------------------------------------------------------------------
# download cache

prepare_cache() { # $suite $target
  suite=$1
  target=$2

  echo "## Installing suite $suite to $target"
  if ! yumbootstrap $suite $target; then
    rm -rf $target
    exit 1
  fi

  # create devices
  echo "## Creating usable /dev in $target"
  rm -rf $target/dev/*

  cdev $target 666 root:root  1 3  /dev/null
  cdev $target 666 root:root  1 5  /dev/zero
  cdev $target 666 root:root  1 7  /dev/full

  cdev $target 600 root:tty   5 1  /dev/console
  cdev $target 666 root:tty   5 0  /dev/tty
  cdev $target 600 root:tty   4 0  /dev/tty0
  cdev $target 600 root:tty   4 1  /dev/tty1
  cdev $target 600 root:tty   4 2  /dev/tty2
  cdev $target 600 root:tty   4 3  /dev/tty3
  cdev $target 600 root:tty   4 4  /dev/tty4
  cdev $target 666 root:tty   5 2  /dev/ptmx  # /dev/pts/ptmx is dynamic

  cdev $target 666 root:root  1 9  /dev/urandom
  cdev $target 666 root:root  1 8  /dev/random

  # is this even needed? Debian ships this, though
  cdev $target 640 root:kmem  1 1  /dev/mem
  cdev $target 640 root:kmem  1 2  /dev/kmem
  cdev $target 640 root:kmem  1 4  /dev/port

  for n in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16; do
    bdev $target 640 root:disk 1 $n /dev/ram$n
  done
  for n in 0 1 2 3 4 5 6 7; do
    bdev $target 640 root:disk 7 $n /dev/loop$n
  done

  mkfifo --mode=600 $target/dev/initctl

  ln -sf /proc/kcore   $target/dev/core
  ln -sf /proc/self/fd $target/dev/fd
  ln -sf fd/0          $target/dev/stdin
  ln -sf fd/1          $target/dev/stdout
  ln -sf fd/2          $target/dev/stderr
  ln -sf ram1          $target/dev/ram

  mkdir --mode=755 $target/dev/pts
  mkdir --mode=755 $target/dev/shm
  mkdir --mode=755 $target/dev/shm/network
}

#-----------------------------------------------------------------------------
# copy cache to workplace

copy_cache_to_rootdir() { # $cache_dir $root_dir
  cache_dir=$1
  root_dir=$2

  echo "## Copying installed OS from cache to $root_dir"
  mkdir -p $root_dir
  # XXX: assume there are no dot files
  cp -a $cache_dir/* $root_dir
}

#-----------------------------------------------------------------------------
# configure guest OS

configure_guest() { # $root_dir $name
  read release < $1/etc/redhat-release
  case $release in
    CentOS*)    distro=centos ;;
    "Red Hat"*) distro=redhat ;;
    Fedora*)    distro=fedora ;;
    *)          distro=`set -- $release; echo $1 | tr A-Z a-z`;;
  esac
  release=$(echo "$release" | sed 's/.*release \([0-9.]\+\).*/\1/')
  echo "## Configuring guest OS (detected $distro release $release)"

  ( setup_login_ttys   "$1" "$2" "$distro" "$release" )
  ( configure_selinux  "$1" "$2" "$distro" "$release" )
  ( setup_networking   "$1" "$2" "$distro" "$release" )
  ( setup_repositories "$1" "$2" "$distro" "$release" )
  ( setup_locale       "$1" "$2" "$distro" "$release" )
  ( setup_services     "$1" "$2" "$distro" "$release" )
  ( set_root_password  "$1" "$2" "$distro" "$release" )
}

#---------------------------------------------------------
# setup login TTYs

setup_login_ttys() {
  root_dir=$1
  #name=$2
  distro=$3
  release=$4

  case $distro-$release in
    centos-5|redhat-5|centos-5.*|redhat-5.*)
      echo "### setting mingetty in /etc/inittab"
      # leave /dev/tty1 (lxc-console -t 1) and add /dev/console (lxc-start
      # without -d option)
      sed -i \
        -e 's/^\([^#].*mingetty.*tty[^1]\)/#\1/' \
        -e '/mingetty.*tty1/i0:2345:respawn:/sbin/mingetty console' \
        $root_dir/etc/inittab
    ;;
    centos-6|redhat-6|centos-6.*|redhat-6.*)
      echo "### setting ACTIVE_CONSOLES in /etc/sysconfig/init"
      # set /dev/tty1 (lxc-console -t 1) and /dev/console (lxc-start without
      # -d option)
      sed -i 's:^ACTIVE_CONSOLES=.*:ACTIVE_CONSOLES="/dev/console /dev/tty1":' \
        $root_dir/etc/sysconfig/init
    ;;
    *)
      # TODO: RH7
      # TODO: Fedora
      echo "### unrecognized distribution, not configuring TTYs"
    ;;
  esac
}

#---------------------------------------------------------
# SELinux

configure_selinux() {
  #root_dir=$1
  #name=$2
  #distro=$3
  #release=$4

  : TODO
  # `echo SELINUX=disabled >> /etc/selinux/config' if applicable
}

#---------------------------------------------------------
# networking

setup_networking() {
  root_dir=$1
  name=$2
  #distro=$3
  #release=$4
  # $GUEST_IFACE comes from global settings

  echo "### Configuring networking"

  echo "#### setting hostname"
  (
    echo "NETWORKING=yes"
    echo "NETWORKING_IPV6=no"
    echo "HOSTNAME=$name"
    echo "#GATEWAY="
  ) > $root_dir/etc/sysconfig/network
  echo
  echo "Remember to set GATEWAY=... in /etc/sysconfig/network"
  echo

  echo "#### configuring $GUEST_IFACE in guest"
  (
    echo "DEVICE=$GUEST_IFACE"
    echo "BOOTPROTO=none"
    echo "ONBOOT=yes"
    echo "# preserve address et al. set by host"
    echo "#BROADCAST="
    echo "#NETWORK="
    echo "#NETMASK="
    echo "#IPADDR="
    echo "USERCTL=no"
  ) > $root_dir/etc/sysconfig/network-scripts/ifcfg-$GUEST_IFACE
  echo
  echo "$GUEST_IFACE set to keep address from host (lxc.network.ipv4 and lxc.network.flags=up)."
  echo "Update /etc/sysconfig/network-scripts/ifcfg-$GUEST_IFACE" \
       "if this is not what you want."
  echo

  echo "#### configuring resolver (/etc/resolv.conf)"
  (
    # TODO: fill with something sane
    echo "# empty resolv.conf"
  ) > $root_dir/etc/resolv.conf
  echo
  echo "resolv.conf left empty. You probably want to adjust it."
  echo
}

#---------------------------------------------------------
# repositories

setup_repositories() {
  #root_dir=$1
  #name=$2
  #distro=$3
  #release=$4

  echo "## configuring default Yum repositories"
  : TODO
  echo
  echo "Yum repositories left intact as they came from \`yum' package."
  echo
}

#---------------------------------------------------------
# locale

setup_locale() {
  #root_dir=$1
  #name=$2
  #distro=$3
  #release=$4

  : TODO
}

#---------------------------------------------------------
# initscripts (+chkconfig)

setup_services() {
  root_dir=$1
  #name=$2
  distro=$3
  release=$4
  # $INITSCRIPTS comes from global settings

  case $distro-$release in
    centos-[56]|redhat-[56]|centos-[56].*|redhat-[56].*)
      echo "## putting trimmed down \`rc.sysinit' and \`halt' initscripts"
      replace_script $root_dir/etc/rc.d/rc.sysinit  \
                     $INITSCRIPTS/centos.rc.sysinit
      replace_script $root_dir/etc/rc.d/init.d/halt \
                     $INITSCRIPTS/centos.halt

      echo "## disabling unneeded services"
      chroot $root_dir chkconfig --list | while read svc state; do
        # keep those enabled
        case $svc in
          network|syslog|rsyslog|crond|sshd|messagebus) continue ;;
        esac
        # disable service if it is enabled anywhere
        case $state in
          *[0-6]:on*) chroot $root_dir chkconfig $svc off ;;
        esac
      done
    ;;
    *)
      # TODO: RH7
      # TODO: Fedora
      echo "## unrecognized distribution, not updating initscripts"
    ;;
  esac
}

#---------------------------------------------------------
# root password

set_root_password() {
  root_dir=$1
  #name=$2
  #distro=$3
  #release=$4

  echo "## setting root password"
  echo root:root | chroot $root_dir /usr/sbin/chpasswd
  echo
  echo "root password was set to \"root\", remember to change it"
  echo
}

#---------------------------------------------------------

#-----------------------------------------------------------------------------
# add container configuration

container_add_devices() { # $lxc_config $root_dir
  lxc_config=$1
  root_dir=$2

  echo "## adding devices configuration to LXC container"
  (
    echo "lxc.tty = 4"
    echo "lxc.pts = 1024"
    echo "lxc.rootfs = $root_dir"
    echo "lxc.cgroup.devices.deny = a"

    echo "# /dev/null, /dev/zero"
    echo "lxc.cgroup.devices.allow = c 1:3 rwm" # null
    echo "lxc.cgroup.devices.allow = c 1:5 rwm" # zero

    echo "# consoles"
    echo "lxc.cgroup.devices.allow = c 5:1 rwm" # console
    echo "lxc.cgroup.devices.allow = c 5:0 rwm" # tty
    echo "lxc.cgroup.devices.allow = c 4:0 rwm" # tty0
    echo "lxc.cgroup.devices.allow = c 4:1 rwm" # tty1
    echo "lxc.cgroup.devices.allow = c 5:2 rwm" # ptmx
    echo "lxc.cgroup.devices.allow = c 136:* rwm" # pts/*

    echo "# /dev/{,u}random"
    echo "lxc.cgroup.devices.allow = c 1:9 rwm" # urandom
    echo "lxc.cgroup.devices.allow = c 1:8 rwm" # random

    echo "# RTC"
    echo "lxc.cgroup.devices.allow = c 254:0 rwm"
  ) >> $lxc_config
}

container_add_mountpoints() {
  lxc_config=$1
  root_dir=$2

  echo "## adding mountpoints to LXC container"
  (
    echo "# mountpoints"
    echo "lxc.mount.entry=proc   $root_dir/proc    proc   nodev,noexec,nosuid  0 0"
    echo "lxc.mount.entry=devpts $root_dir/dev/pts devpts defaults             0 0"
    echo "lxc.mount.entry=sysfs  $root_dir/sys     sysfs  defaults             0 0"
  ) >> $lxc_config
}

#-----------------------------------------------------------------------------
# command line options

LXC_PATH=
GUEST_NAME=

while [ $# != 0 ]; do
  case $1 in
    -h|--help) echo "Usage: ${0##*/} --path ... [--name ...]"; exit ;;
    -p|--path) LXC_PATH=$2; shift ;;
    --path=*)  LXC_PATH=${1#--*=} ;;
    -n|--name) GUEST_NAME=$2; shift ;;
    --name=*)  GUEST_NAME=${1#--*=} ;;
    --) shift; break ;;
    *) break ;;
  esac

  shift
done

if [ -z "$LXC_PATH" ]; then
  echo "--path is required"
  exit 1
fi

if [ `id -u` != 0 ]; then
  echo "This script should be run as root"
  exit 1
fi

ROOTFS=$LXC_PATH/rootfs

#-----------------------------------------------------------------------------
# actual operations

# running them in separate subshells ensures that no variable gets reset
# magically

if [ ! -d $INSTALLED_OS_CACHE_DIR ]; then
  ( prepare_cache $SUITE $INSTALLED_OS_CACHE_DIR )
fi

( copy_cache_to_rootdir $INSTALLED_OS_CACHE_DIR $ROOTFS )

( configure_guest $ROOTFS $GUEST_NAME )

( container_add_devices     $LXC_PATH/config $ROOTFS )
( container_add_mountpoints $LXC_PATH/config $ROOTFS )

#-----------------------------------------------------------------------------
# vim:ft=sh
